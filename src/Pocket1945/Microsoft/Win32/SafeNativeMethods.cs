namespace Microsoft.Win32
{
    #region Using Statements
    using System;
    using System.Runtime.InteropServices;
    using System.Security;
    using System.Security.Permissions;
    #endregion

#if !PocketPC && !Smartphone
    [SuppressUnmanagedCodeSecurity]
    [HostProtection(SecurityAction.LinkDemand, MayLeakOnAbort = true)]
#endif
    internal static class SafeNativeMethods
    {
        //-------------------------------------------------------------------
        /// <summary>
        /// This function determines whether a key is up or down at the time the
        /// function is called, and whether the key was pressed after a previous call
        /// to GetAsyncKeyState.
        /// </summary>
        /// <param name="vKey">
        ///  Specifies one of 256 possible virtual-key codes.  For more information, see 
        ///  Virtual-Key Codes.  You can use left- and right-distinguishing constants to 
        ///  specify certain keys.
        /// </param>
        /// <returns>
        /// If the function succeeds, the return value specifies whether the key was pressed 
        /// since the last call to GetAsyncKeyState, and whether the key is currently up or 
        /// down.
        /// If the most significant bit is set, the key is down. The least significant bit is 
        /// not valid in Windows CE, and should be ignored. GetAsyncKeyState returns the 
        /// current key state even if a window in another thread or process currently has the 
        /// keyboard focus.
        /// </returns>
        //-------------------------------------------------------------------
#if PocketPC || Smartphone
        [DllImport( "coredll.dll" )]
#else
        [DllImport("user32.dll")]
#endif
        internal static extern short GetAsyncKeyState(int vKey);

        //-------------------------------------------------------------------
        /// <summary>
        /// This function retrieves the frequency of the high-resolution performance counter if one is provided by the OEM.
        /// </summary>
        /// <param name="value">
        /// Pointer to a variable that the function sets, in counts per second, to the current performance-counter frequency. If the installed hardware does not support a high-resolution performance counter, this parameter can be to zero.
        /// </param>
        /// <returns>
        /// Nonzero indicates that the installed hardware supports a high-resolution performance counter. Zero indicates that the installed hardware does not support a high-resolution performance counter.
        /// </returns>
        //-------------------------------------------------------------------
#if PocketPC || Smartphone
        [DllImport( "coredll.dll", SetLastError = true )]
#else
        [DllImport("kernel32.dll", SetLastError = true)]
#endif
        internal static extern int QueryPerformanceCounter(ref long value);


        //-------------------------------------------------------------------
        /// <summary>
        /// This function retrieves the current value of the high-resolution performance counter if one is provided by the OEM.
        /// </summary>
        /// <param name="frequency">
        /// Pointer to a variable that the function sets, in counts, to the current performance-counter value.
        /// If the  installed hardware does not support a high-resolution performance counter, this parameter can be set to zero.
        /// </param>
        /// <returns>
        /// Nonzero indicates that the installed hardware supports a high-resolution performance counter.
        /// Zero indicates that the installed hardware does not support a high-resolution performance counter. 
        /// </returns>
        //-------------------------------------------------------------------
#if PocketPC || Smartphone
        [DllImport( "coredll.dll", SetLastError = true )]
#else
        [DllImport("kernel32.dll", SetLastError = true)]
#endif
        internal static extern int QueryPerformanceFrequency(ref Int64 frequency);

#if PocketPC || Smartphone
        //-------------------------------------------------------------------
        /// <summary>
        /// This function defines a system-wide hot key.
        /// </summary>
        /// <param name="hWnd">[in] Handle to the window that will receive WM_HOTKEY
        /// messages generated by the hot key. The value of this parameter should not
        /// be NULL.</param>
        /// <param name="id">[in] Identifier of the hot key. No other hot key in the
        /// calling thread should have the same identifier. An application must specify
        /// a value in the range 0x0000 through 0xBFFF. A shared dynamic-link library
        /// (DLL) must specify a value in the range 0xC000 through 0xFFFF.</param>
        /// <param name="fsModifiers">[in] Specifies keys that must be pressed in
        /// combination with the key specified by the nVirtKey parameter in order to
        /// generate a WM_HOTKEY message.</param>
        /// <param name="vk">[in] Specifies the virtual-key code of the hot key.</param>
        /// <returns>Nonzero indicates success. Zero indicates failure. To get extended
        /// error information, call GetLastError.</returns>
        //-------------------------------------------------------------------
        [DllImport( "coredll.dll" )]
        internal static extern uint RegisterHotKey( IntPtr hWnd, int id, uint fsModifiers, uint vk );


        //-------------------------------------------------------------------
        /// <summary>
        /// This function undefines a system-wide hot key.
        /// </summary>
        /// <param name="fsModifiers">
        /// [in] Specifies combination of modifiers that are to be unregistered. The fsModifiers parameter can be a combination of the values defined above.
        /// </param>
        /// <param name="id">
        /// [in] Identifier of the hot key. No other hot key in the calling thread should have the same identifier. An application must specify a value in the range 0x0000 through 0xBFFF. A shared dynamic-link library (DLL) must specify a value in the range 0xC000 through 0xFFFF.
        /// </param>
        /// <returns></returns>
        //-------------------------------------------------------------------
        [DllImport( "coredll.dll" )]
        [return: MarshalAs( UnmanagedType.Bool )]
        internal static extern bool UnregisterFunc1( uint fsModifiers, int id );
#endif
    }
}
